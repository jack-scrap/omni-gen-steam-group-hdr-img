The following section will run you through the process of creating and using functions.

# Usage
The section of code displays where functionality is essentially re-used.

```
i = 0

i += 1
print(i)

print('asdf')

i += 1
print(i)
```

For the redundant blocks, a function can be created to encompass this functionality.
This is referred to as an "abstraction."

```
i = 0

def fn():
	i += 1

	print(i)

fn()

print('asdf')

fn()
```

The following creates a function:

```
def fn():
	...
```

The following calls the function:

```
fn()
```

# Arguments
Arguments are values that are passed to the function.

These values only exist in the scope of the function.

```
def fn(i):
	print(i)
```

The function can then perform different tasks depending on the provided values, beyond simply statically executing the block of code.

The following examplifies eliminating some redundancy where other complexity is still present.

```
i = 0

def fn(inc):
	i += inc

	print(i)

fn(3)
fn(7)

```

# Return values
In the process of terminating a function, a value can be given back.

This is referred to as the "return value".

The function produces the value after completion:

```
def fn():
	i = 3 + 7

	return i
```

To access this value, simply evaluate the function:

```
var = fn()

print(var)
```

## Multiple
Multiple functions with the same name, but separate arguments or return value may exist.

Functions may be defined with the same name, but having separate arguments or return values.
These function definitions are separate entities, and will be selected based on usage.

```
def fn():
	print(3)

def fn(val):
	print(7)
```

```
def fn():
	print(3)

def fn(val):
	return 3

var = fn()
```

# Recursion
Recursion describes a function calling itself.

With no kind of condition being evaluated, this process will never terminate.

```
def fn():
	fn()
```

In order to terminate this process, the calling of the function must be dependant on some kind of state being edited by the loop.

Here, this recursive function has effectively emulated a loop.

```
i = 0
def asdf():
	i += 1

	if i < 3:
		fn()
```

As soon as the function ends, any kind of variables declared in the function will be lost.

With the usage of arguments, state can be effectively emulated.

```
def fn(i):
	if i < 3:
		fn(i + 1)
```
