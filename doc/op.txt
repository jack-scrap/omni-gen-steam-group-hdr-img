The following will run you through general operators in Python.

# Assignment
The assignment operator, `=` assigns the value on the right to the value on the left.

`var = 3`

# Logical
Logical operators return a boolean input given other boolean inputs.

## Not
`not` returns the opposite.

`not False`
`True`

## And
`or` returns positive if both are positive.

`True and True`
`True`

`False and True`
`False`

`True and False`
`False`

`False and False`
`False`

## Or
`or` returns positive if either are positive.

`True and True`
`True`

`False and True`
`False`

`True and False`
`False`

`False and False`
`False`

# Bitwise
Bitwise operations work on binary data.

`|` - OR
`&` - AND
`^` - XOR (Exclusive OR)

## AND
Should both be true, the result will be true.

`3` (`00000011`)
`7` (`00000111`)

`3 & 7`
`00000011`

## OR
Should either be true, the result will be true.

`3` (`00000011`)
`7` (`00000111`)

`3 | 7`
`00000111`

## XOR
Should either be true but not both.

`3` (`00000011`)
`7` (`00000111`)

`3 ^ 7`
`0000001`

# Complement
"Bitwise complement" takes a single input, inverting the bits.

`3` (`00000011`)

`~3`
`11111100`

# Bitshift
"Bitshifting" will "shift" the true bits a specified number.

`00000011 << 3`
`00011000`

`00000011 >> 3`
`00000000`

## Assignment
Equivalents assignment operators exist for for bitwise and bitshift operations.
`>>=`
`<<=`

`&=`
`|=`
`^=`
