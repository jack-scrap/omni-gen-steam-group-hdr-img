# Variables
Variables hold data.

This data is accessed by name, and can be manipulated.

## Creation
Creating and setting are done in one expression.

The following creates a variable of the name `var`, and sets to an initial value.

```
var = 3
```

Manipulating looks the same.

The data is not required to adhere to the same type that it had on creation.

```
var = 3
var = "Text"
```

## Accessing
Accessing simply requires the identifier.

Observe how the output value is accessed the same as a literal.

```
print(3)
```

```
var = 3
print(var)
```

# Casting
"Casting" is re-interpreting data as another type.

The process of doing so reads like a function with a single argument.

```
var = string(3)
```

In the above snippet, the literal `3` is converted into a string.

# Deleting
The `del` operator will delete the variable provided to it by name.

`
var = 3

del var
`

The variable has been freed, and is no longer accessible.

## Lists
```
var = [3, 7, 12]

del var[0]
```

## Dictionaries
```
dict = {
    'attr': 3,
    'other_attr': 7
}

del dict['attr']
```

## Objects
```
class Class:
	_var = 3

obj = Class()

del obj._var
```

# Global
Variables at the scope of the file.

By default, identical identifiers in a new scope will simply create a new variable bound to the scope.

The following simply defines a new variable with the same name as the global one.

```
var = 3

def fn():
	var = 7

fn()
```

With the `global` keyword, this identifier can reference a global one.

```
var = 3

def fn():
	global var

	var = 7

fn()
```
