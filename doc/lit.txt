The following will run you through process of "literals"

Literals are the fundamental piece, and will not be evaluated beyond their initial.

# Booleans
`False`
`True`

# Numbers
Numeric values can be created given continuous numbers.

These numbers are decimal (base-10) format.

`3712`

Unless this number is `0`, the first digit in the sequence must not be 0.

## Decimal precision
To give a number precision beyond an integer, add the dot operator.

`3.7`

# Arrays
`[3, 7, 12]`

Every entry in a collection must be of the same type.

# Strings
Characters are lists of characters.

This can be used to effectively create collections of text.

`"Buffer, other buffer"`

# Dictionaries
Like lists, braces in enclosed by braces ('{}'), and items are comma-separated.

These items are pairs.

Pairs are separated by `:`, keys proceeding and values following.

```
{
	'attr': 3,
	'other_attr': 7
}
```

# None
The value `None` represents a non-existent value.

This allows for the creation of variables without assigning a value.

# Hexadecimal
Being base-16, this proves useful for sets of data scaling by powers of 2.

`0x3`

# Octal
Numbers beginning with `0` are treated as octal numbers.

`03`
