The following will run you through the order of execution in a program, referred to as "control-flow".

# Scope
Like functions, the blocks in conditionals have scope.

Variables can be defined, expressions can be evaluated and other statements can be nested.

```
if 3 == 7:
	var = 3

	if 3 == 12
		...
```

# Conditionals
Conditionals handle a condition and a block of code.

## if
The `if` statement will only execute its given block of code should the condition be true.

This can be used to only execute statements should certain circumstances be met.

```
if 3 == 7:
	...
```

## elif
The `elif` statements are additional conditions following the first.

```
if 3 == 7:
	print("Yes")

elif 3 == 12:
	...
```

## else
The `else` statement may follow an existing `if` statement, and will executed should none of the previous conditions be met.

No condition is required, simply handling every other case.

```
if 3 == 7:
	print("Yes")

elif 3 == 12:
	print("Yes")

else:
	...
```

# Loops
Loops will run repeatedly until a condition is met.

This is useful for handling sets of data that are redundant, where blocks can be re-used.

## while
The general-purpose "while" loop executes a block of code while the condition remains true.

```
while 3 < 7:
	...
```

Because this condition is true, and the program cannot proceed beyond the loop, the block will execute forever.

By manipulating this condition within the block of code itself, a running loop can alter its future behavior and terminate itself.

An example of running this loop a determined number of times can be examplified as follows:

```
i = 0
while i < 3:
	print(i)

	i += 1
```

## Short-circuiting
The `break` statement will terminate the loop, ignoring the rest of the current iteration and all future ones.

```
i = 0
while i < 3:
	i += 1

	break
```

Here, the first iteration will run until the `break` statement is executed, at which point the current iteration terminates and no future ones will execute.

## continue
The `continue` statement will ignore the rest of the current iteration, and proceed to the next.

```
i = 0 
while i < 3:
	i += 1

	continue
```

# pass
The `pass` keyword substitute a block of code where one is required, the syntax requiring some kind of statement.

```
if 3 == 7:
	pass
```

This keyword is merely a placeholder.
Unlike `break`, the following statements in the block will execute:

```
if 3 == 7:
	pass

	print('Text')
```

# try / except
Exceptions are conditions that technically represent valid code structure, but are defined by the program to be logically impossible.

`try` and `except` blocks can be used to re-direct control flow depending on these logical requirements.

Where values are provided at the time of program execution, this proves useful for running blocks under certain conditions that are not guaranteed to be safe, and continue execution of the program.

```
  obj.fn()
```

Here, invalid code has been created.

This references a variable that does not exist.

The following code in the `try` block will attempt to be executed.

```
try:
	obj.fn()
```

Should an exception be thrown, the block willl not be executed. 

Program execution will continue.

## except
In the case of an exception, the `except` will be executed instead.

```
try:
	obj.fn()

except:
	print('Text')
```

### Specifics
Specific "Error classes" exist to handle specific exceptions, and can be provided.

```
try:
	obj.fn()

except NameError:
	print('Text')
```

One of Python's errors must be provided.
In the case of a non-existent variable, `NameError` is appropriate.

Several provided by the Python programming language are listed below.

`BaseException`   - General exception from which others are built
`ArithmeticError` - Math
`IndexError`      - Accessing of list beyond its size
...

## finally
Regardless of whether an exception is thrown, a `finally` block can be provided to execute regardless.

```
...

finally:
	print('Text')
```

# Semanticaly valid but
Code can be semantically valid and pass execution, but other cases and logical requirements may still exist.

An example is the arithmetic case of division by 0.

`3 / 0`

Though semantically valid, division by `0` is not possible, and an exception will be thrown in the program.
