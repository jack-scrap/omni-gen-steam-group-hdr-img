# Inheritance
The

Doing so can effectively asdf

```
class Parent():
	var = 3

	def fn():
		print("Text")

	def __init__(self):
		pass

class Child(Parent):
	pass
```

Here, the properties have been automatically added.

## Parent property
```
class Parent:
    def __init__(self):
        self.var = 3

        pass

class Qwer(Parent):
    def __init__(self):
        Parent.__init__(self)

        pass
```

## Multiple
A child class can inherit from more than one parent.

```
class Parent():
	var = 3

	def fn():
		print("Text")

		def __init__(self):
			pass
	
class OtherParent():
	var = 3

	def fn():
		print("Text")

		def __init__(self):
			pass

class Child(Parent, OtherParent):
	pass
```

## Overriding
Overriding will discard the parent and substitute it with one provided by the child.

```
TODO
```

## Overloading

```
TODO
```

## Accessing parents
Like the `self` variable assigned within classes, `super` can be used to access the parent.

```
class Parent:
	def __init__(self):
		self.var = 3

class Child(Parent):
	print(super.var)
```

## Class methods
Class functions allow for the creation of functions.

This allows for scoping of functions to a specific location.

`self` now refers to the class instead of the object.

```
class Parent:
    @classmethod
    def fn(self):
        print('text')
```

## Static methods
Static functions are simply functions created to be scoped to a specific location.

No knowledge of the class or object exist.

```
class Parent:
	@staticmethod
	def fn():
		print('text')

Parent.fn()
```
