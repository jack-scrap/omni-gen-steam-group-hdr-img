The following will run you through common cases when dealing with strings.

Strings are arrays of individual characters.

This provides a convenient way to dedicate storage to a sequence of text.

`'Text'`
`3`

Common operations on lists work the same.

`'Text'[2]`
`3`

# Multi-line
Strings spanning multiple lines are created with.

```
str = """Text
	Other text"""
```

```
str = (
  	"Text"
    "Other text"
)
```

# Case
The following functions convert case.

- `upper()`
- `lower()`

# Substring
A "substring" is a potentially smaller segment given a range.

`'Text'[0:2]`
`'Tex'`

# Splitting
"Splitting" a string divides into smaller segments based on a "separator".

For whitespace-separated sequences of characters.

`'Text other text'.split(' ')`
`['Text', 'other', 'text']`

# Formatting
Formatting describes the substitution of other values into a string.

The function `format()` is provided.

`'Text {} {}'.format(3, 'text')`

Here, arguments are provided based on position.

## Specific indices
Indices may be specified to re-order the arguments may be specified to re-order the arguments.

`'Text {1} {0}'.format(3, 'text')`

## Named
Named arguments may be provided.

'Text {arg} {other_arg}'.format(arg = 3, other_arg = 7)
