Algorithms are processes designed to run as efficiently as possible.

By examining sets of data and re-structuring accordingly, operations can eliminate unecessary computations.

# Algorithms
## Bubble
"Bubble Sort" traverses a set of data swapping every proceeding group of 2.

`[12, 7, 3]`

`[12, 7]`
`[7, 12]`

`[7, 12, 3]`

`[12, 3]`
`[3, 12]`

`[7, 3, 12]`

`[7, 3]`
`[3, 7]`

`[3, 7, 12]`

## Insertion
"Insertion Sort" continually traverses data until it encounters an unsorted item, and then traverses backwards until it has found a more appropriate index.

Traversing the set continually comparing groups of two, compare the items.

`[7, 12, 3]`

`[7, 12]`
`[7, 12]`

`[7, 12, 3]`

`[12, 3]`

`[3, 7, 12]`

Should the second item be larger than the first, the set will be traversed backwards until it encounters an item it is larger than.

## Selection sort
Continually proceed until it finds a minimum.

Divide into sorted and unsorted position.

Initially, the first minimum is first item.

## Merge
"Merge Sort" continually divides data in half.

`[3, 7, 12, 3]`
`[3, 7]`, `[12, 3]`
`[3]`, `[7]`, `[12]`, `[3]`

Once sorted, these are combined into a larger set.

This will continue until the greater array has been sorted.

## Quick
"Quick sort" divid

## Big-O
What is referred to as "Big-O" notation describes the effectiveness of an algorithm as the input data set scales in size.

O(1)          - Constant
O(n)          - Linear
O(n^2)        - Quadratic
O(n^c)        - Polynomial
O(c^n)        - Exponential
O(log(n))     - Logarithmic
O((loG(n))^c) - Polylogarithmic
