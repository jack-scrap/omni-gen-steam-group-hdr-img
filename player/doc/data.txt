Data structures describe collections of smaller pieces of data, and the relationship between them.

Interfaces to create basic data structures are provided by the Python programming language.
Examples are lists (`[3, 7, 12]`), dictionaries (`{key: value}`) and strings (`"Text"`).

The following section will go over the contriving of more complex data structures given the tools in the language.

# List
## Stack
A "stack" is a list where operations are only permissible on the top element.

Referred to as "FIFO" (First-in, first-out), this structure is useful for scenarios where the most recently item added should take precedence.

Exactly two operations exist, "pushing" and "popping", referring to adding of a new element and removal of the most newly added element.

A stack simply being a list, exclusive usage of the provided `append` and `pop` functions effectively implements a stack.

```
ls = [3, 7, 12]

ls.append(3)
ls.append(7)

ls.pop()
```

### Pushing
`ls.append(3)`

This newly added item has the highest precedence, and will be used when operating on the list.

### Popping
`ls.pop()`

# Queue
A "queue" is a list where pushing adds to the end of the list, and popping removes from the beginning.

Referred to as "FILO" (First-in, last-out), this structure is useful for scenarios where the most recently item added should take precedence.

Adding data involves adding it to the end of the list, and removing data involves removing the beginning of the list.

This is useful for operating on data that is dependant on the time at which it was added.

```
ls = [3, 7, 12]

ls.append(3)
ls.append(7)

ls.pop(0)
ls.pop(0)
```

### Pushing
`ls.append(3)`.

This item has the least precedence possible, all previously existing items needing to be operated on previously.

### Popping
Providing an index to the `pop()` function can remove an item at an index besides the last and re-structure the list, with all remaining items being sequentially indexed.

Passing the initial index, `0` will result in elimination of the first item, the second item now having the highest priority.

`ls.pop(0)`

# Node
A "node" is a structure that contains data and references to other nodes.

This is useful for cases where knowledge of a single node is only required at any time.

```
class Node:
    def __init__(self, val, next):
        self._var = val
        self._next = next
```

This inherently creates a non-terminating process, where an operation constantly spawns a new operation.
The above case constantly requiring another node to be constructed.

However, by providing a non-node value, this sequence will be terminated.
Providing `None` can effectively represent the end of a sequence.

```
class Node:
    def __init__(self, val, next):
        self._var = val
        self._next = next

node = Node(3, None)
other_node(7, node)
```

## Self-reference
Should a node reference itself, a non-terminating process will be created.

```
class Node:
		def __init__(self, val, next):
				self._var = val
				self._next = next

node = Node(3, node)
```

## Traversal
"Traversal" describes operating on a node's data, and then operating on its references.

The following prints the entire content of the data structure by continually operating on data and proceeding to the next reference.

```
class Node:
		def __init__(self, val, next):
				self._var = val
				self._next = next

		def fn():
				print(self._var)

				self._next()
```

The case of infinite recursion exists, where the function is constantly required to run a new function.

To terminate this sequence, a conditional check must be implemented.

Setting the final node's attribute to `None` and ensuring that the reference is a node before operating will create a finite process.

```
			...

			if self._next:
				self._next.fn()

node = Node(3, None)
other_node = Node(7, node)
```

### Insertion
"Insertion" describes adding of a node to another node.

```
node = Node(3, [])

other_node = Node(7, [])

node._next.append(other_node)
```

### Deletion
"Deletion" describes removal of a node.

With removal of a node, all its reference will be removed.

Should no links to these children exist elsewhere, these nodes will be permanently lost.

```
node = Node(3, [])

other_node = Node(7, [node])

other_node.pop()
```

## Linked list
A "linked" list describes a list where nodes have exactly one reference.

This allows for creation of a list where the individual items are inherently disconnected.

```
class Node:
	def __init__(self, val, next):
		self._var = val

		self._next = next

other_node = Node(7, None)
node = Node(3, other_node)
	```

## Tree
Nodes in a "tree" may contain other independant nodes, but may not contain references to existing nodes.

The result is a "descending" data structure.

```
class Node:
    def __init__(self, val, next):
        self._var = val
        self._next = next

    def disp(self):
        print(self._var)

        for _ in self._next:
            _.disp()

lower_branch = Node(3, [])

branch = Node(7, [lower_branch])
other_branch = Node(12, [])

tree = Node(3, [branch, other_branch])

tree.disp()
```

Created nodes the potential to have knowledge, but have no knowledge of nodes in other "branches".

### Path
A "path" is a sequence of connected nodes.

### Depth
The "depth" of a tree is the number of connections between the root and the end of the longest chain.

### Breadth
The "breadth" of a tree is the maximum number of nodes simultaneously existing at a particular level.

## Graph
A graph is a node-based data structure where nodes may have any number of connections to other nodes.

No "order" exists, and any node may be connected to any number of other nodes.

```
class Node:
    def __init__(self, val, next):
        self._var = val

        self._next = next

    def disp(self):
        print(self._var)

        for node in self._next:
            node.print_var()

node = Node(3, [])
other_node = Node(7, [node])
another_node = Node(12, [node])

another_node.print_var()
```

With no inherent order, cyclical lists may be created.
