# Mode
[F1] - File Browser
[F2] - Editor
[F3] - Prompt

## File Browser
[Down Arrow] -             Next entry
[Up Arrow] -               Previous entry
[Enter *directory*] -      Change current directory
[Enter *file*] -           Open in editor

## Editor
[Enter] -                  New line
[Backspace] -              Delete

[Ctrl] + [z] -             Undo
[Ctrl] + [r] -             Redo

## Prompt
`*command* *argument* ...`

[Enter]     -              Run
[Backspace] -              Delete

# Display
[Left Mouse Button] -      Pan camera
[Scroll Wheel]      -      Zoom

# Command
## open
Open file in editor.

`open file_name`

## new
Create new file of specified name, open in editor.

`new file_name`

## new_dir
Create new directory.

`new_dir dir_name`

## save
Write buffer to disk.

`save` - Save current buffer to name of current buffer
`save file_name` - Save current buffer to specified file name

## del
Delete existing file or directory.

`del` - Delete file matching name of current buffer
`del file_name` - Delete entry of specified name

## rename
Change name of file or directory.

`rename new_file_name` - Rename entry name of current buffer to specified name
`rename old_file_name new_file_name` - Rename specified entry name to second specified name

## copy
Duplicate existing file or directory.
	
`copy existing_file_name new_file_name` - Copy specified entry name to second specified entry name

## run
Execute script file.

`run` - Execute file name matching current buffer
`run fileName` - Execute specified file name

## set
Change to specified section, level.

`set section lvl`

## next
Proceed to next available level.

`next`

## quit
Exit program.

`quit`

# Script
`import omni`

## Data
`omni.data`

## Vehicles
### Crane
`._data` - Data
`._loc` - Location

#### Navigation
`.zoom(delta)` - Move forward, back
`.pan(delta)` -  Move head right, left
`.ped(delta)` -  Move head up, down

`.grab()` - Grab, insert container

### Truck
This allows for complete freedom of movement without being restricted to an axis.

`._data` - Data
`._loc` - Location

#### Navigation
`.mv(delta)` -   Move forward, back

`.turn(delta)` - Turn left, right

### Ship
`zoom(delta)` - Move forward, back

`._data` - Data
`._loc` -  Location

## Data
Data sets can be accessed by key.

`state`
`other_state`

Data and offset is provided.

`.data`
	`._data`
	`._loc`

In the case of arrays, size is provided.

	`._data`
		`._x` - Size (X)
		`._y` - Size (Y)
		`._z` - Size (Z)

Both initial and the desired state is provided.

`.goal`

## Bounds
Bounds are provided.

`.bounds`
	`.area`
	`.rng`

Area-based bounds from cones are provided in `.area`, and range-based bounds providing limits are provided in `rng`.

These can be used to assert that collisions do not occur.
