Strings are lists of individual "characters".

This provides a convenient way to dedicate storage to a sequence of text.

Placing a sequence of characters in '' signifies a string.

`'Text'`

Indexing works the same.

`'Text'[2]`
`3`

Commonly, lists operations work the same.

`'Text'.count('t')`

# Multi-line
Strings spanning multiple lines are created with triple quotes.

```
str = '''
Text
Other text
'''
```

# Case
The following functions convert case.

`'Text'.upper()`
`'TEXT'`

`'Text'.lower()`
`'text'`

# Substring
A "substring" is a potentially smaller segment of a string.

Taking a range, like a list will produce this substring.

`'Text'[0:2]`
`'Tex'`

# Splitting
"Splitting" a string divides into smaller segments based on a single character, referred to as a "separator".

For whitespace-separated sequences of characters, this operation will split a string into individual words.

The `split()` function is provided to achieve this.

`'Text other text'.split(' ')`
`['Text', 'other', 'text']`

# Joining
"Joining" is the opposite of splitting, combining a list of strings into one continuous one.

`['Text', 'other text'].join()`
`'Text other text'`

# Whitespace
## Stripping
"Stripping" removes any whitespace on the beginning and end of a string.

This will produce a list of individual elements.

`'Text other text   '.strip()`
`'Text other text'`

# Other
## Replace
`replace()` will replace a sub-string with another sub-string.

`'Text other text'.replace('Text', 'Other text')`

# Formatting
Formatting describes the substitution of other values into a string.

`'Text {} {}'.format(3, 'text')`

Like functions, the arguments are provided based on position.  `{}` being matched to represent the current iteration.

## Specific indices
Indices may be specified to re-order the arguments may be specified to re-order the arguments.

`'Text {1} {0}'.format(3, 'text')`

## Named
Named arguments may also be provided.

'Text {arg} {other_arg}'.format(arg = 3, other_arg = 7)

# Arithmetic
Mathematical operations can be performed on strings.

Individual "characters" represent a numeric value.
Because of this, the characters in these strings can be compared and have equality tested.

Numeric values of common "ASCII" (American Standard Code for Information Interchange) characters are listed below.

32 - ' '
33 - '!'
34 - '"'
35 - '#'
36 - '$'
37 - '%'
38 - '&'
39 - '''
40 - '('
41 - ')'
42 - '*'
43 - '+'
44 - ','
45 - '-'
46 - '.'
47 - '/'
48 - '0'
49 - '1'
50 - '2'
51 - '3'
52 - '4'
53 - '5'
54 - '6'
55 - '7'
56 - '8'
57 - '9'
58 - ':'
59 - ';'
60 - '<'
61 - '='
62 - '>'
63 - '?'
64 - '@'
65 - 'A'
66 - 'B'
67 - 'C'
68 - 'D'
69 - 'E'
70 - 'F'
71 - 'G'
72 - 'H'
73 - 'I'
74 - 'J'
75 - 'K'
76 - 'L'
77 - 'M'
78 - 'N'
79 - 'O'
80 - 'P'
81 - 'Q'
82 - 'R'
83 - 'S'
84 - 'T'
85 - 'U'
86 - 'V'
87 - 'W'
88 - 'X'
89 - 'Y'
90 - 'Z'
91 - '['
92 - '\'
93 - ']'
94 - '^'
95 - '_'
96 - '`'
97 - 'a'
98 - 'b'
99 - 'c'
100 - 'd'
101 - 'e'
102 - 'f'
103 - 'g'
104 - 'h'
105 - 'i'
106 - 'j'
107 - 'k'
108 - 'l'
109 - 'm'
110 - 'n'
111 - 'o'
112 - 'p'
113 - 'q'
114 - 'r'
115 - 's'
116 - 't'
117 - 'u'
118 - 'v'
119 - 'w'
120 - 'x'
121 - 'y'
122 - 'z'
123 - '{'
124 - '|'
125 - '}'
126 - '~'

## Comparison
The following shows the results of comparison operations on strings consisting of a single character.

`'a' == 's'`
`False`

`'a' == 'a'`
`True`

`'a' < 's'`
`True`

`'a' > 's'`
`False`

## Addition
The addition operation applied to strings joins them into one.

`'Text' + 'Other text'`
`'TextOther text'`

## Multiplication
The multiplication operator applied to strings produces multiple instances of the string and joins them into one.

`'Text' * 3`
`TextTextText`

## Greater strings
In the case of strings larger than one character, this operation will be performed on every character.

Equality of strings is false in all cases except for all characters being identical.

`'Text' == 'Text'`
`True`

`'Text' == 'Other text'`
`False`

Comparison of strings operates "lexicographically" -- comparing characters sequentially until one is larger than another.

`'Text' < 'Other text'`
`False`
