Strings are lists of individual "characters".

This provides a convenient way to dedicate storage to a sequence of text.

Placing a sequence of characters in '' signifies a string.

`'Text'`

Indexing works the same.

`'Text'[2]`
`3`

Commonly, lists operations work the same.

`'Text'.count('t')`

# Multi-line
Strings spanning multiple lines are created with triple quotes.

```
str = '''
Text
Other text
'''
```

# Case
The following functions convert case.

`'Text'.upper()`
`'TEXT'`

`'Text'.lower()`
`'text'`

# Substring
A "substring" is a potentially smaller segment of a string.

Taking a range, like a list will produce this substring.

`'Text'[0:2]`
`'Tex'`

# Splitting
"Splitting" a string divides into smaller segments based on a single character, referred to as a "separator".

For whitespace-separated sequences of characters, this operation will split a string into individual words.

The `split()` function is provided to achieve this.

`'Text other text'.split(' ')`
`['Text', 'other', 'text']`

# Joining
"Joining" is the opposite of splitting, combining a list of strings into one continuous one.

`['Text', 'other text'].join()`
`'Text other text'`

# Whitespace
## Stripping
"Stripping" removes any whitespace on the beginning and end of a string.

This will produce a list of individual elements.

`'Text other text   '.strip()`
`'Text other text'`

# Other
## Replace
`replace()` will replace a sub-string with another sub-string.

`'Text other text'.replace('Text', 'Other text')`

# Formatting
Formatting describes the substitution of other values into a string.

`'Text {} {}'.format(3, 'text')`

Like functions, the arguments are provided based on position.  `{}` being matched to represent the current iteration.

## Specific indices
Indices may be specified to re-order the arguments may be specified to re-order the arguments.

`'Text {1} {0}'.format(3, 'text')`

## Named
Named arguments may also be provided.

'Text {arg} {other_arg}'.format(arg = 3, other_arg = 7)
