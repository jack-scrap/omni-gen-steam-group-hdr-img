A "higher order" function refers to a function that itself utilizes a function as arguments or return values.

After defining a function, this allows for extensibility beyond the default definition.

# Arguments
Functions are passed the same as variables.

```
def fn():
	print('Text')

def higher(fn):
	...
```

The function now being scoped to the other, calling works the same.

```
...

def higher(fn):
	fn()
```

## Callbacks
A "callback" refers to a function defined explicitly for the purpose of being passed as an argument to another function, typically after the function body.

```
def fn():
	print('Text')

def higher(fn):
	print('Text')

	fn()
```

# Return value
functions can be generated

## Generating functions
Functions can be generated based on certain state.

```
def fn():
	def other_fn():
		print('Text')

	return other_fn

other_fn = fn()
```
