Threads allow the simultaneous execution of processes.

Because commands are no longer executed in order, performance gains can be met where processes are no longer required to await the completion of the previous ones.

The following will walk you through the process of creating and utilizing threads, and the process of guaranteeing proper execution order.

# Creation
The following spawns a thread.

```
def fn():
    i = 0
    while i < 10:
        print(i)

        i += 1

thread = threading.Thread(target = fn)

thread.start()
```

Immediately, an error case arrises.

Because the creation of the thread is the last statement, the program immediately terminates and eliminates any threads, likely before they have a chance to execute.

In order to guarantee the completion of this thread, the program must await its completion.
This is achieved with the `join` function.

```
...

thread.start()
thread.join()
```

# Concurrency
Concurrency describes the process of multiple threads running at once.

```
import threading

def fn():
    i = 0
    while i < 10:
        print(3)

        i += 1

def other_fn():
    i = 0
    while i < 10:
        print(7)

        i += 1

thread = threading.Thread(target = fn)
other_thread = threading.Thread(target = other_fn)

thread.start()
other_thread.start()
```

Depending on determinism during the execution of the program, the output of the processes will change.

## Lock
"Locking" a thread halts execution until the locked one has completed.

```
import threading

def fn():
    i = 0
    while i < 1000:
        print(3)

        i += 1

def other_fn():
    i = 0
    while i < 1000:
        print("Text" + str(3))

        i += 1

thread = threading.Thread(target = fn)
other_thread = threading.Thread(target = other_fn)

thread.start()
thread.lock()

other_thread.start()
```

The output of the secondary thread will not begin until the first has completed.

# Mutual exclusion
"Mutual exclusion" signals the availability of a block of code to be edited.

This availability can be toggled on or off, and whilst on will prevent any other instances from executing it.

The provided `acquire()` and `release()` functions will signify availability to any other thread.

```
import threading

i = 0

lock = threading.Lock()

def fn():
    global i

    while i < 10:
        lock.acquire()

        print(i)

        i += 1

        lock.release()

def other_fn():
    global i

    while i < 10:
        lock.acquire()

        print(i)

        i += 1

        lock.release()

thread = threading.Thread(target = fn)

other_thread = threading.Thread(target = other_fn)

thread.start()
thread.join()

other_thread.start()
other_thread.join()
```

Adding a unique log to each unique iteration of the while loop will display which is being called.
Repeated executions of this script should reveal that the deterministic script is guaranteed not to clash.

# Sleeping
Processes may halt a pre-determined amount of time.

```
import time

time.sleep(3)
```

# Safety
The existence of multiple threads means that errors can not be determined during script compilation.

Both fundamental issues with the Python language and undesired effects can be created as a result.

The following section will run over some of the 
commonly found errors arrising as a byproduct of multi-threading.

## Race condition
Where multiple processes are editing one piece of data, the general term "race condition" describes a problem where both processes attempt to access it at once.

These processes cannot edit this data simultaneously, and doing so will terminate the proces.

```
import threading

var = []
for i in range(1000):
	var.append(0)

def hjkl():
	global var

	for i in range(1000):
		var[i] = 3

	print(var)

hjkl_thread = threading.Thread(target = hjkl)

hjkl_thread.start()

for i in range(1000):
	var[i] = 7

print(var)
```

## Determinism
Determinism describes an issue where the output of the program depends on certain processes running in a certain order.

This may be unwanted behavior.

In order to guarantee the proper output, the programmer must require that certain conditions are met before running these processes.

```
import threading

var = 0

def fn():
	global var

	for _ in range(1000):
		var += 1

	print(var)

fn_thread = threading.Thread(target = fn)

fn_thread.start()

print(var)
```

# Errors
Because the order of execution is now non-deterministic, the cannot be guaranteed at compile time.

These errors should be resolved, should they be confirmed.

## Deadlock
"Deadlock" is misuse of mutual exclusion where one thread is awaits the other, and vice-versa.

Deadlock occurs when one thread is awaiting the output of another before proceeding, and the other thread is simultaneously awaiting the output of the first.

This produces a non-terminating loop.

```
import threading

i = 0

lock = threading.Lock()
other_lock = threading.Lock()

def fn():
    lock.acquire()
    other_lock.acquire()

def other_fn():
    other_lock.acquire()
    lock.acquire()

thread = threading.Thread(target = fn)
other_thread = threading.Thread(target = other_fn)

thread.start()
thread.join()

other_thread.start()
other_thread.join()
```
