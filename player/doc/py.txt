The following will run you through general workings of the Python 3 programming language.

# Comments
Comments allow for inline text to be written in code.

Code following the `#` character will eliminate characters from evaluation until the end of the line.

```
# Text
# Other text

var = 3

def fn(): # Function
	print('Text') # Call to output
```

# Indentation
Python uses whitespace to signify code blocks.

Indented lines following statements warranting code blocks are considered to be in the block.

The following is valid.

```
def fn():
	print("Text")
```

The following is not valid, considering the function body to be empty and the following lines to be separate statements.

```
def fn():
	print("Text")
```

This indentation may be of any width, but must be consistent within each block.

Nested scopes may be of separate indentation width.

# Modules
"Modules" are external files containing Python code.

These modules can be imported into other files for convenient re-use.

`import module`

By default, both global modules on the system and modules existing in the same directory as the script will be matched.

Should modules exist in a separate directory, the directory must be added with an editing of a `system` variable.

`sys.path.append('dir')`

## Accessing
Upon importing, the module acts like an object, allowing for variables and functions in the module to be accessed with the `.` operator.

`print(module.var)`

With a base `import` statement, all available identifiers are imported.
Instead of this, specific functions or variables can be imported.

`from module import var, fn`

This will put any identifiers in the global namespace.

`print(var)`

## All identifiers
`*` can be provided as a wildcard to match all identifiers.

This will simply import the module, but attach it to the global namespace.

`from module import *`

# Private
Like classes, variables and functions strictly desired for use within a module can be marked as private.

Prefixing with any amount of underscores will only allow access within the module.

```
_var = 3

def _fn():
	print("Text")
```

## Package
Packages are greater collections of modules.

A directory containing the file `__init__.py` will treat the directory all contained Python modules as a package.

`import module.package, module.other_package`

On importing, code contained in `__init__.py` will be executed.

The contents of this file may be empty, but the file must be present.

## Renaming
Both the imported module and the identifiers it contains can be re-named via the `as` keyword.

`import module as other_module`

# Attributes
The function `dir()` can be used to view all attributes on an object.

`dir(obj)`

This can be used to view the inner workings of code without consulting documentation.
